# fix_installation.py
"""
üîß Script de Correction d'Installation
R√©sout automatiquement les probl√®mes d√©tect√©s lors de la v√©rification
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description=""):
    """Ex√©cute une commande en affichant le progr√®s"""
    print(f"\nüîß {description}")
    print(f"   Commande: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print("   ‚úÖ Succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå Erreur: {e}")
        if e.stdout:
            print(f"   üì§ Sortie: {e.stdout}")
        if e.stderr:
            print(f"   üí• Erreur: {e.stderr}")
        return False

def install_missing_dependencies():
    """Installe les d√©pendances manquantes"""
    print("\n" + "="*50)
    print("üì¶ INSTALLATION DES D√âPENDANCES MANQUANTES")
    print("="*50)
    
    missing_packages = [
        "fastapi",
        "uvicorn[standard]", 
        "opencv-python",
        "pydantic",
        "websockets",
        "python-multipart",
        "aiofiles"
    ]
    
    for package in missing_packages:
        print(f"\nüì• Installation de {package}...")
        success = run_command(
            f"pip install {package}",
            f"Installation {package}"
        )
        if not success:
            print(f"‚ö†Ô∏è √âchec installation {package}, continuons...")
    
    print("\n‚úÖ Installation des d√©pendances termin√©e!")

def fix_python_path():
    """Corrige le probl√®me d'import du module 'app'"""
    print("\n" + "="*50)
    print("üêç CORRECTION DU PYTHONPATH")
    print("="*50)
    
    # Cr√©er un fichier setup.py pour installer le package en mode d√©veloppement
    setup_content = '''
from setuptools import setup, find_packages

setup(
    name="ai-service",
    version="1.0.0",
    packages=find_packages(),
    install_requires=[
        "fastapi>=0.104.1",
        "uvicorn[standard]>=0.24.0",
        "torch>=2.1.0",
        "torchvision>=0.16.0",
        "opencv-python>=4.8.1.78",
        "numpy>=1.24.3",
        "pydantic>=2.4.2",
        "websockets>=12.0",
        "python-multipart>=0.0.6",
        "aiofiles>=23.2.1",
        "psutil>=5.9.6"
    ],
    python_requires=">=3.8",
)
'''
    
    with open("setup.py", "w") as f:
        f.write(setup_content)
    
    print("üìÑ Fichier setup.py cr√©√©")
    
    # Installation en mode d√©veloppement
    success = run_command(
        "pip install -e .",
        "Installation du package en mode d√©veloppement"
    )
    
    if success:
        print("‚úÖ Package install√© en mode d√©veloppement")
    else:
        print("‚ö†Ô∏è Installation package √©chou√©e, essayons une autre m√©thode...")
        
        # M√©thode alternative: ajouter le r√©pertoire au PYTHONPATH
        current_dir = os.getcwd()
        python_path = os.environ.get('PYTHONPATH', '')
        
        if current_dir not in python_path:
            print(f"üîß Ajout de {current_dir} au PYTHONPATH")
            os.environ['PYTHONPATH'] = f"{current_dir};{python_path}" if python_path else current_dir

def create_missing_files():
    """Cr√©e les fichiers manquants"""
    print("\n" + "="*50)
    print("üìÅ CR√âATION DES FICHIERS MANQUANTS")
    print("="*50)
    
    # Cr√©er .dockerignore
    dockerignore_content = '''
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
logs/
*.log

# Temporary files
storage/temp/
storage/cache/
*.tmp

# Git
.git/
.gitignore

# Documentation
docs/
README.md

# Tests
tests/
coverage/
.coverage
.pytest_cache/

# Docker
Dockerfile
docker-compose.yml
.dockerignore
'''
    
    with open(".dockerignore", "w") as f:
        f.write(dockerignore_content)
    
    print("‚úÖ Fichier .dockerignore cr√©√©")

def test_imports():
    """Teste les imports apr√®s correction"""
    print("\n" + "="*50)
    print("üß™ TEST DES IMPORTS APR√àS CORRECTION")
    print("="*50)
    
    test_script = '''
import sys
import os

# Ajouter le r√©pertoire courant au path si n√©cessaire
current_dir = os.getcwd()
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

try:
    print("üîç Test import app...")
    from app import __version__
    print(f"‚úÖ app.__version__: {__version__}")
    
    print("üîç Test import main...")
    from app.main import app as fastapi_app
    print("‚úÖ app.main import√©")
    
    print("üîç Test import core...")
    from app.core import ObjectDetector, ModelManager
    print("‚úÖ app.core import√©")
    
    print("üîç Test import utils...")
    from app.utils import ImageProcessor
    print("‚úÖ app.utils import√©")
    
    print("üîç Test import schemas...")
    from app.schemas import ObjectDetection
    print("‚úÖ app.schemas import√©")
    
    print("\\nüéâ TOUS LES IMPORTS R√âUSSIS!")
    
except ImportError as e:
    print(f"‚ùå Erreur import: {e}")
    import traceback
    traceback.print_exc()
    
except Exception as e:
    print(f"üí• Erreur inattendue: {e}")
    import traceback
    traceback.print_exc()
'''
    
    with open("test_imports_fix.py", "w") as f:
        f.write(test_script)
    
    success = run_command(
        "python test_imports_fix.py",
        "Test des imports corrig√©s"
    )
    
    # Nettoyage
    Path("test_imports_fix.py").unlink(missing_ok=True)
    
    return success

def create_minimal_models():
    """Cr√©e des mod√®les factices pour les tests"""
    print("\n" + "="*50)
    print("ü§ñ CR√âATION DE MOD√àLES DE D√âMONSTRATION")
    print("="*50)
    
    models_dir = Path("storage/models")
    models_dir.mkdir(parents=True, exist_ok=True)
    
    model_script = '''
import torch
import torch.nn as nn
from pathlib import Path

class DemoModel(nn.Module):
    """Mod√®le de d√©monstration simple"""
    def __init__(self, num_classes=28):
        super().__init__()
        self.conv = nn.Conv2d(3, 32, 3, padding=1)
        self.pool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(32, num_classes * 6)  # 6 = x,y,w,h,conf,class
        
    def forward(self, x):
        x = torch.relu(self.conv(x))
        x = self.pool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return x.view(x.size(0), -1, 6)

# Cr√©er et sauvegarder les mod√®les de d√©monstration
models_to_create = [
    "stable_model_epoch_30.pth",
    "best_extended_model.pth", 
    "fast_stream_model.pth"
]

models_dir = Path("storage/models")

for model_name in models_to_create:
    model = DemoModel()
    model_path = models_dir / model_name
    
    # Sauvegarder avec quelques m√©tadonn√©es
    torch.save({
        'model_state_dict': model.state_dict(),
        'model_info': {
            'name': model_name,
            'type': 'demo',
            'classes': 28,
            'input_size': (320, 320)
        }
    }, model_path)
    
    print(f"‚úÖ Mod√®le cr√©√©: {model_name}")

print("üéâ Mod√®les de d√©monstration cr√©√©s!")
'''
    
    with open("create_demo_models.py", "w") as f:
        f.write(model_script)
    
    success = run_command(
        "python create_demo_models.py",
        "Cr√©ation des mod√®les de d√©monstration"
    )
    
    # Nettoyage
    Path("create_demo_models.py").unlink(missing_ok=True)
    
    if success:
        print("‚úÖ Mod√®les de d√©monstration cr√©√©s dans storage/models/")
    
    return success

def main():
    """Fonction principale de correction"""
    print("üîß SERVICE IA - CORRECTION D'INSTALLATION")
    print("=" * 60)
    print("Ce script corrige automatiquement les probl√®mes d√©tect√©s.\n")
    
    # 1. Installation des d√©pendances
    install_missing_dependencies()
    
    # 2. Correction du PYTHONPATH
    fix_python_path()
    
    # 3. Cr√©ation des fichiers manquants
    create_missing_files()
    
    # 4. Test des imports
    imports_ok = test_imports()
    
    # 5. Cr√©ation de mod√®les de d√©monstration
    models_ok = create_minimal_models()
    
    # Rapport final
    print("\n" + "=" * 60)
    print("üìä RAPPORT DE CORRECTION")
    print("=" * 60)
    
    if imports_ok:
        print("‚úÖ Imports Python: CORRIG√â")
    else:
        print("‚ùå Imports Python: PROBL√àME PERSISTANT")
    
    if models_ok:
        print("‚úÖ Mod√®les de d√©monstration: CR√â√âS")
    else:
        print("‚ö†Ô∏è Mod√®les de d√©monstration: √âCHEC")
    
    print("\nüéØ PROCHAINES √âTAPES:")
    print("1. Relancez la v√©rification: python scripts/check_installation.py")
    print("2. D√©marrez le service: python scripts/start_service.py")
    print("3. Testez l'API: http://localhost:8000/docs")
    
    print("\nüí° NOTES:")
    print("‚Ä¢ Les mod√®les cr√©√©s sont des d√©monstrations")
    print("‚Ä¢ Remplacez-les par vos vrais mod√®les entra√Æn√©s")
    print("‚Ä¢ Consultez README.md pour plus d'informations")

if __name__ == "__main__":
    main()